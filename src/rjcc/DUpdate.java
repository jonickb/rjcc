/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rjcc;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.Timer;

/**
 *
 * @author jonick
 */
public class DUpdate extends javax.swing.JDialog {

    /**
     * Creates new form DUpdate
     */
    String srvVer;
    int size;
    Timer timer;
    int count;
    BufferedInputStream in;
    FileOutputStream fout;
    final byte data[] = new byte[1024];
    Task task;
    
    public DUpdate(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        jTextArea1.append("Нажмите кнопку 'Проверить'");
        
      
    }
    
    void calculate(String v) {
        jTextArea1.append("\nТекущая версия программы: " + MainFrame.version);
        int d1 = v.indexOf('.');
        int d2 = v.indexOf('.', d1+1);
        int so1, so2, so3, o1, o2, o3;
        so1 = Integer.parseInt(v.substring(0, d1));
        so2 = Integer.parseInt(v.substring(d1+1, d2));
        so3 = Integer.parseInt(v.substring(d2+1));
        d1 = MainFrame.version.indexOf('.');
        d2 = MainFrame.version.indexOf('.', d1+1);
        o1 = Integer.parseInt(MainFrame.version.substring(0, d1));
        o2 = Integer.parseInt(MainFrame.version.substring(d1+1, d2));
        o3 = Integer.parseInt(MainFrame.version.substring(d2+1));
        
        if (so1 > o1) {
            jButton1.setEnabled(true);
            } else if (so2 > o2 && so1 == o1) {
                jButton1.setEnabled(true);
            } else if (so3 > o3 && so2 == o2 && so1 == o1) {
                jButton1.setEnabled(true);
            } else
                jTextArea1.append("\nОбновление не требуется.");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Обновление программы");

        jButton1.setText("Обновить");
        jButton1.setEnabled(false);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Проверить");
        jButton2.setFocusPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextArea1.append("\nСервер обновлений http://city-clean.dev/");
        try {
            URL url = new URL("http://city-clean.dev/version.txt");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();  
	  if (conn.getResponseCode() / 100 != 2) {
	    jTextArea1.append("\nОтвет сервера. Код: "+conn.getResponseCode());
	  }            
            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
            DataInputStream dis = new DataInputStream(bis);
			while (dis.available() != 0) {
                                srvVer = dis.readLine();
                                jTextArea1.append("\nСоединение установленно.");
                                jTextArea1.append("\nВерсия сервера: " + srvVer);
			}
                        calculate(srvVer);
        } catch (MalformedURLException ex) {
            jTextArea1.append("\nMalformedURLException. Ошибка соединения с сервером обновлений.");
        } catch (IOException ex) {
            jTextArea1.append("\nIOException. Ошибка чтения файлов обновлений.");
        }        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        in = null;
        fout = null;            
        try {
            URL url = new URL("http://city-clean.dev/1Cv8_ut_20150621.dt");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int s = conn.getContentLength();
            jProgressBar1.setMaximum(s);
            jProgressBar1.setStringPainted(true);
            jTextArea1.append("\nРазмер файла: " + s/1024+"КБайт");
            conn.getInputStream().close();
            in = new BufferedInputStream(url.openStream());
            fout = new FileOutputStream("download.dt");            
            size = 0;
            task = new Task();
            task.addPropertyChangeListener(null);
            task.execute();                       
        } catch (Exception e) {} 
    }//GEN-LAST:event_jButton1ActionPerformed

    class Task extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() throws IOException {
                    while ( (count = in.read(data, 0, 1024)) != -1 ) {
                        size+=count;                        
                        jProgressBar1.setValue(size);                        
                        fout.write(data, 0, count);                        
                    }            

            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {            
            try {
                fout.close();
                in.close(); 
            } catch (IOException ex) {
                Logger.getLogger(DUpdate.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextArea1.append("\nЗагрузка завершена.");
            jTextArea1.append("\nПерезапустите программу.");
            jButton1.setEnabled(false);
        }
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
